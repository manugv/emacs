* Init file and configurations.

** Inhibit startup screen and message from showing.
#+name Inhibit few things
#+begin_src elisp
  (setq inhibit-startup-screen t
        inhibit-startup-echo-area-message t
        inhibit-startup-message t
        initial-scratch-message nil)
#+end_src


** Disable the menu bar, tool bar and scroll bars
#+name Inhibit few things
#+begin_src elisp
  ;; menu bar
  (menu-bar-mode -1)
  ;; Disable the tool bar
  (tool-bar-mode -1)
  ;; Disable the scroll bars
  (scroll-bar-mode -1)
#+end_src

** Enable smooth scrolling emacs >= 29
#+begin_src  elisp
  ;; enable smooth scrolling
  (pixel-scroll-precision-mode 1)
#+end_src

** Set unicode
#+begin_src elisp
  ;; prefer utf-8
  ;; UTF-8 all the way
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-language-environment 'utf-8)
#+end_src

** File changes in buffer.
- When files change on disk, update the buffer automatically. This is needed when I open files in another place and edit them
#+begin_src elisp
  (global-auto-revert-mode t)
#+end_src

** Package management
- Load path where config files for latex, python mode and others are defined.
  #+begin_src elisp
    (add-to-list 'load-path "~/.config/emacs/initfiles/")
  #+end_src

- Update built-in packages too. This was mainly used to fix eldoc?
  #+begin_src elisp
    (setq package-install-upgrade-built-in t)
  #+end_src
- Prefer newer packages, add a repository and use use-package method to handle packages.
  #+begin_src elisp
    (setq load-prefer-newer t)
    (eval-and-compile
      (require 'package)
      (setq package-archives (append
    			  package-archives
    			  '(("melpa" . "https://melpa.org/packages/")))))
    (require 'use-package)
  #+end_src
- Install packages asynchronously
  #+begin_src elisp
    (use-package async
      :ensure t
      :config
      (setq async-bytecomp-package-mode 1))
  #+end_src

** Look and feel
- Use built-in modus themes
  #+begin_src elisp
    (require 'init-look)
  #+end_src
- Add variable-pitch for text mode and fixed pitch for programming mode.
- Most of the settings are default settings of modus themes.
   
** completion and icons in buffer
#+begin_src elisp
  (require 'init-completion)
  (require 'init-icons)			
#+end_src
- icomplete-vertical-mode :: vertical layput in minibuffer
- marginalia :: annotations in the minibuffer
- corfu :: Completion popup ui in the buffer.
- cape :: Completion At Point Extensions and bindings to complete.
- nerd-icons :: Icons in emacs.
- nerd-icons-completion :: Use icons during completion. (mostly minibuffer)
- nerd-icons-corfu :: Use icons in buffer wit corfu ui.
- nerd-icons-dired :: USe for dired mode.
  
** Eglot
#+begin_src elisp
  (require 'init-eglot)
#+end_src
- set-up eglot
- Set up corfu with eglot for continuously updating the candidates: https://github.com/minad/corfu/wiki
- set-up eldoc-box as eldoc used minibuffer or a frame to show documentation. And it does it continuously.
  
** Manage enviornments especially python using direnv
1. Install direnv on the system. This is used to activate the env in a folder. (https://direnv.net/docs/installation.html)
2. envrc does buffer-local direnv integration for Emacs.
#+begin_src elisp  
  (use-package envrc
    :ensure t
    :hook (after-init . envrc-global-mode))
#+end_src

** Programming Languages
- Treesitter language-grammer need to be installed inside emacs for tresitter mode to work.
- Is done manually in emacs.
*** Ledger mode
- ledger-cli needs to be installed (https://ledger-cli.org/) on system
- To keep track of plain text acccounting
- This Emacs library provides a major mode for editing files in the format used by the ledger command-line accounting system
#+begin_src elisp
  (require 'init-ledger)
#+end_src

*** Python mode
#+begin_src elisp
  (require 'init-python)
#+end_src
- Create a virtual environment of python using venv (https://docs.python.org/3/library/venv.html).
- Create .envrc file in the folder. And add following lines
  #+begin_src bash
    export VIRTUAL_ENV=folder containing virtual enviornment (not bin)
    layout python
  #+end_src
- numpydoc :: package to add doc-strings.
- hook the treesitter mode to normal python mode.
  
*** TODO Julia mode
 #+begin_src elisp
   (require 'init-juliamode)
 #+end_src
 - vterm :: install the following packages on the system before installing vterm on emacs
   - cmake, libtool-bin, libvterm/libvterm-devel
 - julia-repl :: a minor mode for interacting with a Julia REPL running inside Emacs
 - julia-mode :: major mode for the Julia programming language.
 - eglot-jl :: loads support for the Julia language server into eglot and project.el
   - Add direnv support instead of specifying default paths (https://fredrikekre.se/posts/direnv-with-julia/)

*** Rust mode
- Install rust, rust-analyzer on the system
- rust-analyzer is a library for semantic analysis of Rust code and its configuration (https://rust-analyzer.github.io/manual.html#eglot)
- Config rust auto-completion with corfu.
- When file is compiled and run. Switch buffer to the buffer where code is being run.
  #+begin_src elisp
    (require 'init-rust)
  #+end_src


*** Latex mode
#+begin_src elisp
  (require 'init-tex)
#+end_src
- add ref-tex and auctex


*** Git
- simple magit configuration 
#+begin_src elisp
  (use-package magit
    :ensure t
    :config
    :bind (("C-x g" . magit-status)
           ("C-c M-g" . magit-file-popup)))
#+end_src


*** Markdown (markdown-mode)
#+begin_src elisp
  (use-package markdown-mode
    :ensure t
    :defer t
    :config
    (setq markdown-fontify-code-blocks-natively t))
#+end_src

*** Org-mode different languages support
#+begin_src elisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (julia . t)
     (latex . t)
     (shell . t)
     ))
#+end_src

*** Which key
- show all remaining key combinations when doing multi-key commands
- https://github.com/justbur/emacs-which-key
#+begin_src elisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
    (which-key-setup-side-window-right))
#+end_src


** Custom.el
- Stores automatic customization options is a custom file.
#+begin_src elisp
  (setq custom-file (locate-user-emacs-file "initfiles/custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src
